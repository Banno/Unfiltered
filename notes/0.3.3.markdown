Documentation
-------------

Unfiltered documentation is [now available](http://unfiltered.databinder.net/).

library module
--------------
* [eed3si9n][eed3si9n] `Accepts.Javascript` now accepts `text/javascript` or `application/javascript`
* [eed3si9n][eed3si9n] `Accepts.Jsonp` now accepts `application/json`, `text/javascript`, or `application/javascript`
* Deprecating `HttpRequest.requestURI` and `HttpRequest.contextPath` and replacing with `HttpRequest.uri`. `HttpRequest.contextPath` only existed to suit the `HttpServletRequest` spec and had no context in the `Netty` module and thus should not be in the base `HttpRequest` interface.
* Added `QueryString(qs)` extractor for extracting the raw query string from a request
* Added `HostPort(hostname, port)` extractor for extracting out a request's host and port
* New `unfiltered.request.Body` object for working with request bodies explicitly, not as an extractor as these operations generally have side effects.

filter module
-------------
* Added `ContextPath(ctx, path)` module to suit filter plans mounted on a context path. Note, the `Path` extractor will contain the context path. To remove redundancy in filter plans, use `ContextPath(ctx, path)`

Prior to this release, you used matched filters on context paths with

    jettySvr.context("/foo") { _.filter(Planify { case Path("/bar") => ... } }

To accomplish the same match in this release and beyond,

    jettySvr.context("/foo") { _.filter(Planify { case ContextPath(_, "/bar") => ... } }

json-p module
-------------

[eed3si9n][eed3si9n] The jsonp wrapper object now defines a `respond` method that returns a `ChainResponse` that handles a
by-name parameter which produces a lift-json `JValue`.

    case GET(UFPath("/jsonp/lift-json/optional") & Jsonp.Optional(callback)) => callback respond {
      import net.liftweb.json.JsonAST._
      import net.liftweb.json.JsonDSL._
      "answer" -> Seq(42)
    }

netty module
------------
* [gh-15](https://github.com/n8han/Unfiltered/issues/15) Fixed issue with undecoded parameter keys

[eed3si9n]: https://github.com/eed3si9n/

all intents
-----------

* [n8han][n8han] A function object `Intent#apply` in each binding
module, to explicitly construct an intent without the somewhat awkward
type annotations.

[n8han]: https://github.com/n8han/

    val anIntent = unfiltered.filter.Intent {
      case GET(req) => ...
    }
